// Стрілочні функції
// Усі стрілки створюються як функціональний вираз,
// і якщо функція - не анонімна, її необхідно присвоювати змінній.

// function classAdd(a, b, c) {
//     return a + b + c
// }


// Якщо параметрів декілька, то вони перераховуються через кому
// в круглих дужках, між знаками дорівнює = і стрілкою =>.

// const add = (a, b, c) => {
//     return a + b + c;
// };

// Якщо параметр один, його можна оголошувати без круглих дужок.

// const add = a => {
//     return a + 5;
// };

// Якщо параметри відсутні, то обов'язково повинні бути порожні круглі дужки.

// const greet = () => {
//     console.log("Hello!")
// }

// =================================================
// Неявне повернення
// У стрілочної функції після символу => знаходиться її тіло. Існує два варіанти:
// з фігурними дужками і без них.

// // До
// function classicAdd(a, b, c) {
//     return a + b + c;
//   }

//   // Після
//   const arrowAdd = (a, b, c) => a + b + c;

// ===============================================
// Псевдомасив arguments
// Псевдомасив arguments
// У стрілочних функцій немає локальної змінної arguments, що містить усі аргументи.
// Якщо необхідно зібрати всі аргументи в масив, використовується операція rest.

// const add = (...args) => {
//     console.log(args)
// }

// add(1, 2, 3)

// ================================================
// Стрілочні функції як колбеки
// Анонімні стрілочні функції відмінно підходять як колбеки для перебираючих методів масиву
// завдяки коротшому синтаксису оголошення, особливо, якщо не потрібне тіло функції.

// const numbers = [5, 10, 15, 20, 25];

// // Оголошення функції
// numbers.forEach(function (number, index) {
//     console.log(`Індекс ${index}, значення ${number}`);
// });

// // Анонімна стрілочна функція
// numbers.forEach((number, index) => {
//     console.log(`Індекс ${index}, значення ${number}`);
// });

// ====================================================
// Стрілочну колбек-функцію також можна оголошувати окремо і передавати на неї посилання. Це варто робити,
// якщо одна функція використовується у декількох місцях програми або якщо вона громіздка.

const numbers = [5, 7, 8, 23, 56, 77]

const logMessage = (number, index) => {
    console.log(`idx ${index}, value of number ${number}`)
}

numbers.forEach(logMessage)